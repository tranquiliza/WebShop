// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebShop.Context;

namespace WebShop.Migrations
{
    [DbContext(typeof(WebShopContext))]
    [Migration("20181013000424_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("WebShop.Models.Baskets.Basket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("OrderId");

                    b.Property<int?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("UserId");

                    b.ToTable("Baskets");
                });

            modelBuilder.Entity("WebShop.Models.Customers.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<string>("Country");

                    b.Property<string>("Email");

                    b.Property<string>("FirstName");

                    b.Property<string>("PhoneNumber");

                    b.Property<string>("Surname");

                    b.Property<string>("Zip");

                    b.HasKey("Id");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("WebShop.Models.Languages.Label", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Alias");

                    b.HasKey("Id");

                    b.ToTable("LabelsAlias");

                    b.HasData(
                        new { Id = 1, Alias = "LBL_TEST_LABEL" },
                        new { Id = 2, Alias = "LBL_TEST_NUMBER_TWO" }
                    );
                });

            modelBuilder.Entity("WebShop.Models.Languages.LabelValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("LabelId");

                    b.Property<int?>("LanguageId");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.HasIndex("LabelId");

                    b.HasIndex("LanguageId");

                    b.ToTable("LabelValues");

                    b.HasData(
                        new { Id = 1, LabelId = 1, LanguageId = 1, Value = "Dette er et test label!" },
                        new { Id = 2, LabelId = 1, LanguageId = 2, Value = "This is a test label!" },
                        new { Id = 3, LabelId = 2, LanguageId = 1, Value = "Endnu et test label" },
                        new { Id = 4, LabelId = 2, LanguageId = 2, Value = "Yet another test label" }
                    );
                });

            modelBuilder.Entity("WebShop.Models.Languages.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("IsoCode");

                    b.Property<string>("LanguageName");

                    b.HasKey("Id");

                    b.ToTable("Languages");

                    b.HasData(
                        new { Id = 1, IsoCode = "da-DK", LanguageName = "Danish" },
                        new { Id = 2, IsoCode = "en-GB", LanguageName = "UK-English" }
                    );
                });

            modelBuilder.Entity("WebShop.Models.Orders.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BuyerId");

                    b.Property<int?>("DeliveryAddressId");

                    b.Property<string>("OrderIdentifier");

                    b.Property<int>("OrderStatus");

                    b.Property<int?>("OrganisationId");

                    b.Property<int?>("PaymentInformationId");

                    b.HasKey("Id");

                    b.HasIndex("BuyerId");

                    b.HasIndex("DeliveryAddressId");

                    b.HasIndex("OrganisationId");

                    b.HasIndex("PaymentInformationId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("WebShop.Models.Organisations.Organisation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("OrganisationName");

                    b.HasKey("Id");

                    b.ToTable("Organisations");
                });

            modelBuilder.Entity("WebShop.Models.Payments.PaymentInformation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DibsMerchantId");

                    b.Property<int>("PaymentStatus");

                    b.Property<string>("TransationIdentifier");

                    b.HasKey("Id");

                    b.ToTable("PaymentInformation");
                });

            modelBuilder.Entity("WebShop.Models.Products.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<int?>("OrganisationId");

                    b.Property<int>("Price");

                    b.Property<int?>("ProductInformationId");

                    b.HasKey("Id");

                    b.HasIndex("OrganisationId");

                    b.HasIndex("ProductInformationId");

                    b.ToTable("Products");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Product");
                });

            modelBuilder.Entity("WebShop.Models.Products.ProductInformation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("ProductInformation");
                });

            modelBuilder.Entity("WebShop.Models.Users.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("WebShop.Models.Products.GiftcardProduct", b =>
                {
                    b.HasBaseType("WebShop.Models.Products.Product");

                    b.Property<bool>("IsPriceOverrideable");

                    b.ToTable("GiftcardProduct");

                    b.HasDiscriminator().HasValue("GiftcardProduct");
                });

            modelBuilder.Entity("WebShop.Models.Baskets.Basket", b =>
                {
                    b.HasOne("WebShop.Models.Orders.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId");

                    b.HasOne("WebShop.Models.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("WebShop.Models.Languages.LabelValue", b =>
                {
                    b.HasOne("WebShop.Models.Languages.Label")
                        .WithMany("LabelValues")
                        .HasForeignKey("LabelId");

                    b.HasOne("WebShop.Models.Languages.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId");
                });

            modelBuilder.Entity("WebShop.Models.Orders.Order", b =>
                {
                    b.HasOne("WebShop.Models.Customers.Customer", "Buyer")
                        .WithMany()
                        .HasForeignKey("BuyerId");

                    b.HasOne("WebShop.Models.Customers.Customer", "DeliveryAddress")
                        .WithMany()
                        .HasForeignKey("DeliveryAddressId");

                    b.HasOne("WebShop.Models.Organisations.Organisation", "Organisation")
                        .WithMany()
                        .HasForeignKey("OrganisationId");

                    b.HasOne("WebShop.Models.Payments.PaymentInformation", "PaymentInformation")
                        .WithMany()
                        .HasForeignKey("PaymentInformationId");
                });

            modelBuilder.Entity("WebShop.Models.Products.Product", b =>
                {
                    b.HasOne("WebShop.Models.Organisations.Organisation", "Organisation")
                        .WithMany()
                        .HasForeignKey("OrganisationId");

                    b.HasOne("WebShop.Models.Products.ProductInformation", "ProductInformation")
                        .WithMany()
                        .HasForeignKey("ProductInformationId");
                });
#pragma warning restore 612, 618
        }
    }
}
